// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RaftExternal.proto

#include "RaftExternal.pb.h"
#include "RaftExternal.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Raft {
namespace External {

static const char* RaftExternal_method_names[] = {
  "/Raft.External.RaftExternal/Put",
  "/Raft.External.RaftExternal/Get",
};

std::unique_ptr< RaftExternal::Stub> RaftExternal::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftExternal::Stub> stub(new RaftExternal::Stub(channel));
  return stub;
}

RaftExternal::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Put_(RaftExternal_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(RaftExternal_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftExternal::Stub::Put(::grpc::ClientContext* context, const ::Raft::External::PutRequest& request, ::Raft::External::PutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Put_, context, request, response);
}

void RaftExternal::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::Raft::External::PutRequest* request, ::Raft::External::PutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void RaftExternal::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::External::PutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void RaftExternal::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::Raft::External::PutRequest* request, ::Raft::External::PutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

void RaftExternal::Stub::experimental_async::Put(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::External::PutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Raft::External::PutReply>* RaftExternal::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::Raft::External::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Raft::External::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Raft::External::PutReply>* RaftExternal::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::Raft::External::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Raft::External::PutReply>::Create(channel_.get(), cq, rpcmethod_Put_, context, request, false);
}

::grpc::Status RaftExternal::Stub::Get(::grpc::ClientContext* context, const ::Raft::External::GetRequest& request, ::Raft::External::GetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void RaftExternal::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::Raft::External::GetRequest* request, ::Raft::External::GetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void RaftExternal::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::External::GetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void RaftExternal::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::Raft::External::GetRequest* request, ::Raft::External::GetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

void RaftExternal::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::External::GetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Raft::External::GetReply>* RaftExternal::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::Raft::External::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Raft::External::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Raft::External::GetReply>* RaftExternal::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::Raft::External::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Raft::External::GetReply>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

RaftExternal::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftExternal_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftExternal::Service, ::Raft::External::PutRequest, ::Raft::External::PutReply>(
          std::mem_fn(&RaftExternal::Service::Put), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftExternal_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftExternal::Service, ::Raft::External::GetRequest, ::Raft::External::GetReply>(
          std::mem_fn(&RaftExternal::Service::Get), this)));
}

RaftExternal::Service::~Service() {
}

::grpc::Status RaftExternal::Service::Put(::grpc::ServerContext* context, const ::Raft::External::PutRequest* request, ::Raft::External::PutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftExternal::Service::Get(::grpc::ServerContext* context, const ::Raft::External::GetRequest* request, ::Raft::External::GetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Raft
}  // namespace External

