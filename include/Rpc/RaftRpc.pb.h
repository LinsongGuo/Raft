// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftRpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RaftRpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RaftRpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RaftRpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RaftRpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RaftRpc_2eproto;
namespace Raft {
namespace Rpc {
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class RpcAppendEntriesReply;
class RpcAppendEntriesReplyDefaultTypeInternal;
extern RpcAppendEntriesReplyDefaultTypeInternal _RpcAppendEntriesReply_default_instance_;
class RpcAppendEntriesRequest;
class RpcAppendEntriesRequestDefaultTypeInternal;
extern RpcAppendEntriesRequestDefaultTypeInternal _RpcAppendEntriesRequest_default_instance_;
class RpcRequestVoteReply;
class RpcRequestVoteReplyDefaultTypeInternal;
extern RpcRequestVoteReplyDefaultTypeInternal _RpcRequestVoteReply_default_instance_;
class RpcRequestVoteRequest;
class RpcRequestVoteRequestDefaultTypeInternal;
extern RpcRequestVoteRequestDefaultTypeInternal _RpcRequestVoteRequest_default_instance_;
}  // namespace Rpc
}  // namespace Raft
PROTOBUF_NAMESPACE_OPEN
template<> ::Raft::Rpc::Entry* Arena::CreateMaybeMessage<::Raft::Rpc::Entry>(Arena*);
template<> ::Raft::Rpc::RpcAppendEntriesReply* Arena::CreateMaybeMessage<::Raft::Rpc::RpcAppendEntriesReply>(Arena*);
template<> ::Raft::Rpc::RpcAppendEntriesRequest* Arena::CreateMaybeMessage<::Raft::Rpc::RpcAppendEntriesRequest>(Arena*);
template<> ::Raft::Rpc::RpcRequestVoteReply* Arena::CreateMaybeMessage<::Raft::Rpc::RpcRequestVoteReply>(Arena*);
template<> ::Raft::Rpc::RpcRequestVoteRequest* Arena::CreateMaybeMessage<::Raft::Rpc::RpcRequestVoteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Raft {
namespace Rpc {

// ===================================================================

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Raft.Rpc.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Raft.Rpc.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RaftRpc_2eproto);
    return ::descriptor_table_RaftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string args = 2;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Raft.Rpc.Entry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RaftRpc_2eproto;
};
// -------------------------------------------------------------------

class RpcAppendEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Raft.Rpc.RpcAppendEntriesRequest) */ {
 public:
  RpcAppendEntriesRequest();
  virtual ~RpcAppendEntriesRequest();

  RpcAppendEntriesRequest(const RpcAppendEntriesRequest& from);
  RpcAppendEntriesRequest(RpcAppendEntriesRequest&& from) noexcept
    : RpcAppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline RpcAppendEntriesRequest& operator=(const RpcAppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcAppendEntriesRequest& operator=(RpcAppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcAppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcAppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const RpcAppendEntriesRequest*>(
               &_RpcAppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RpcAppendEntriesRequest* other);
  friend void swap(RpcAppendEntriesRequest& a, RpcAppendEntriesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcAppendEntriesRequest* New() const final {
    return CreateMaybeMessage<RpcAppendEntriesRequest>(nullptr);
  }

  RpcAppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcAppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcAppendEntriesRequest& from);
  void MergeFrom(const RpcAppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcAppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Raft.Rpc.RpcAppendEntriesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RaftRpc_2eproto);
    return ::descriptor_table_RaftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Raft.Rpc.Entry entries = 5;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 5;
  ::Raft::Rpc::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Raft::Rpc::Entry >*
      mutable_entries();
  const ::Raft::Rpc::Entry& entries(int index) const;
  ::Raft::Rpc::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Raft::Rpc::Entry >&
      entries() const;

  // string leaderID = 2;
  void clear_leaderid();
  static const int kLeaderIDFieldNumber = 2;
  const std::string& leaderid() const;
  void set_leaderid(const std::string& value);
  void set_leaderid(std::string&& value);
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  std::string* mutable_leaderid();
  std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 prevLogIndex = 3;
  void clear_prevlogindex();
  static const int kPrevLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogindex() const;
  void set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogterm() const;
  void set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 leaderCommit = 6;
  void clear_leadercommit();
  static const int kLeaderCommitFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 leadercommit() const;
  void set_leadercommit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Raft.Rpc.RpcAppendEntriesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Raft::Rpc::Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::int64 leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RaftRpc_2eproto;
};
// -------------------------------------------------------------------

class RpcAppendEntriesReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Raft.Rpc.RpcAppendEntriesReply) */ {
 public:
  RpcAppendEntriesReply();
  virtual ~RpcAppendEntriesReply();

  RpcAppendEntriesReply(const RpcAppendEntriesReply& from);
  RpcAppendEntriesReply(RpcAppendEntriesReply&& from) noexcept
    : RpcAppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline RpcAppendEntriesReply& operator=(const RpcAppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcAppendEntriesReply& operator=(RpcAppendEntriesReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcAppendEntriesReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcAppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const RpcAppendEntriesReply*>(
               &_RpcAppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RpcAppendEntriesReply* other);
  friend void swap(RpcAppendEntriesReply& a, RpcAppendEntriesReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcAppendEntriesReply* New() const final {
    return CreateMaybeMessage<RpcAppendEntriesReply>(nullptr);
  }

  RpcAppendEntriesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcAppendEntriesReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcAppendEntriesReply& from);
  void MergeFrom(const RpcAppendEntriesReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcAppendEntriesReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Raft.Rpc.RpcAppendEntriesReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RaftRpc_2eproto);
    return ::descriptor_table_RaftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Raft.Rpc.RpcAppendEntriesReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RaftRpc_2eproto;
};
// -------------------------------------------------------------------

class RpcRequestVoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Raft.Rpc.RpcRequestVoteRequest) */ {
 public:
  RpcRequestVoteRequest();
  virtual ~RpcRequestVoteRequest();

  RpcRequestVoteRequest(const RpcRequestVoteRequest& from);
  RpcRequestVoteRequest(RpcRequestVoteRequest&& from) noexcept
    : RpcRequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RpcRequestVoteRequest& operator=(const RpcRequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestVoteRequest& operator=(RpcRequestVoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcRequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RpcRequestVoteRequest*>(
               &_RpcRequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RpcRequestVoteRequest* other);
  friend void swap(RpcRequestVoteRequest& a, RpcRequestVoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequestVoteRequest* New() const final {
    return CreateMaybeMessage<RpcRequestVoteRequest>(nullptr);
  }

  RpcRequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcRequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcRequestVoteRequest& from);
  void MergeFrom(const RpcRequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Raft.Rpc.RpcRequestVoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RaftRpc_2eproto);
    return ::descriptor_table_RaftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidateID = 2;
  void clear_candidateid();
  static const int kCandidateIDFieldNumber = 2;
  const std::string& candidateid() const;
  void set_candidateid(const std::string& value);
  void set_candidateid(std::string&& value);
  void set_candidateid(const char* value);
  void set_candidateid(const char* value, size_t size);
  std::string* mutable_candidateid();
  std::string* release_candidateid();
  void set_allocated_candidateid(std::string* candidateid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 lastLogIndex = 3;
  void clear_lastlogindex();
  static const int kLastLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Raft.Rpc.RpcRequestVoteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidateid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RaftRpc_2eproto;
};
// -------------------------------------------------------------------

class RpcRequestVoteReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Raft.Rpc.RpcRequestVoteReply) */ {
 public:
  RpcRequestVoteReply();
  virtual ~RpcRequestVoteReply();

  RpcRequestVoteReply(const RpcRequestVoteReply& from);
  RpcRequestVoteReply(RpcRequestVoteReply&& from) noexcept
    : RpcRequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RpcRequestVoteReply& operator=(const RpcRequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestVoteReply& operator=(RpcRequestVoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcRequestVoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RpcRequestVoteReply*>(
               &_RpcRequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RpcRequestVoteReply* other);
  friend void swap(RpcRequestVoteReply& a, RpcRequestVoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequestVoteReply* New() const final {
    return CreateMaybeMessage<RpcRequestVoteReply>(nullptr);
  }

  RpcRequestVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcRequestVoteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcRequestVoteReply& from);
  void MergeFrom(const RpcRequestVoteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestVoteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Raft.Rpc.RpcRequestVoteReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RaftRpc_2eproto);
    return ::descriptor_table_RaftRpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool voteGranted = 2;
  void clear_votegranted();
  static const int kVoteGrantedFieldNumber = 2;
  bool votegranted() const;
  void set_votegranted(bool value);

  // @@protoc_insertion_point(class_scope:Raft.Rpc.RpcRequestVoteReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool votegranted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RaftRpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// string key = 1;
inline void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.Entry.key)
  return key_.GetNoArena();
}
inline void Entry::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Raft.Rpc.Entry.key)
}
inline void Entry::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Raft.Rpc.Entry.key)
}
inline void Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Raft.Rpc.Entry.key)
}
inline void Entry::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Raft.Rpc.Entry.key)
}
inline std::string* Entry::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:Raft.Rpc.Entry.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:Raft.Rpc.Entry.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Raft.Rpc.Entry.key)
}

// string args = 2;
inline void Entry::clear_args() {
  args_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::args() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.Entry.args)
  return args_.GetNoArena();
}
inline void Entry::set_args(const std::string& value) {
  
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Raft.Rpc.Entry.args)
}
inline void Entry::set_args(std::string&& value) {
  
  args_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Raft.Rpc.Entry.args)
}
inline void Entry::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Raft.Rpc.Entry.args)
}
inline void Entry::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Raft.Rpc.Entry.args)
}
inline std::string* Entry::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:Raft.Rpc.Entry.args)
  return args_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_args() {
  // @@protoc_insertion_point(field_release:Raft.Rpc.Entry.args)
  
  return args_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:Raft.Rpc.Entry.args)
}

// uint64 term = 3;
inline void Entry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.Entry.term)
  return term_;
}
inline void Entry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.Entry.term)
}

// -------------------------------------------------------------------

// RpcAppendEntriesRequest

// uint64 term = 1;
inline void RpcAppendEntriesRequest::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcAppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesRequest.term)
  return term_;
}
inline void RpcAppendEntriesRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesRequest.term)
}

// string leaderID = 2;
inline void RpcAppendEntriesRequest::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcAppendEntriesRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
  return leaderid_.GetNoArena();
}
inline void RpcAppendEntriesRequest::set_leaderid(const std::string& value) {
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
}
inline void RpcAppendEntriesRequest::set_leaderid(std::string&& value) {
  
  leaderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
}
inline void RpcAppendEntriesRequest::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
}
inline void RpcAppendEntriesRequest::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
}
inline std::string* RpcAppendEntriesRequest::mutable_leaderid() {
  
  // @@protoc_insertion_point(field_mutable:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
  return leaderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcAppendEntriesRequest::release_leaderid() {
  // @@protoc_insertion_point(field_release:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
  
  return leaderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcAppendEntriesRequest::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:Raft.Rpc.RpcAppendEntriesRequest.leaderID)
}

// uint64 prevLogIndex = 3;
inline void RpcAppendEntriesRequest::clear_prevlogindex() {
  prevlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcAppendEntriesRequest::prevlogindex() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesRequest.prevLogIndex)
  return prevlogindex_;
}
inline void RpcAppendEntriesRequest::set_prevlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesRequest.prevLogIndex)
}

// uint64 prevLogTerm = 4;
inline void RpcAppendEntriesRequest::clear_prevlogterm() {
  prevlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcAppendEntriesRequest::prevlogterm() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesRequest.prevLogTerm)
  return prevlogterm_;
}
inline void RpcAppendEntriesRequest::set_prevlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesRequest.prevLogTerm)
}

// repeated .Raft.Rpc.Entry entries = 5;
inline int RpcAppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void RpcAppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline ::Raft::Rpc::Entry* RpcAppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Raft.Rpc.RpcAppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Raft::Rpc::Entry >*
RpcAppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Raft.Rpc.RpcAppendEntriesRequest.entries)
  return &entries_;
}
inline const ::Raft::Rpc::Entry& RpcAppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesRequest.entries)
  return entries_.Get(index);
}
inline ::Raft::Rpc::Entry* RpcAppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:Raft.Rpc.RpcAppendEntriesRequest.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Raft::Rpc::Entry >&
RpcAppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:Raft.Rpc.RpcAppendEntriesRequest.entries)
  return entries_;
}

// int64 leaderCommit = 6;
inline void RpcAppendEntriesRequest::clear_leadercommit() {
  leadercommit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RpcAppendEntriesRequest::leadercommit() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesRequest.leaderCommit)
  return leadercommit_;
}
inline void RpcAppendEntriesRequest::set_leadercommit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesRequest.leaderCommit)
}

// -------------------------------------------------------------------

// RpcAppendEntriesReply

// uint64 term = 1;
inline void RpcAppendEntriesReply::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcAppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesReply.term)
  return term_;
}
inline void RpcAppendEntriesReply::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesReply.term)
}

// bool success = 2;
inline void RpcAppendEntriesReply::clear_success() {
  success_ = false;
}
inline bool RpcAppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcAppendEntriesReply.success)
  return success_;
}
inline void RpcAppendEntriesReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcAppendEntriesReply.success)
}

// -------------------------------------------------------------------

// RpcRequestVoteRequest

// uint64 term = 1;
inline void RpcRequestVoteRequest::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcRequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcRequestVoteRequest.term)
  return term_;
}
inline void RpcRequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcRequestVoteRequest.term)
}

// string candidateID = 2;
inline void RpcRequestVoteRequest::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcRequestVoteRequest::candidateid() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcRequestVoteRequest.candidateID)
  return candidateid_.GetNoArena();
}
inline void RpcRequestVoteRequest::set_candidateid(const std::string& value) {
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcRequestVoteRequest.candidateID)
}
inline void RpcRequestVoteRequest::set_candidateid(std::string&& value) {
  
  candidateid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Raft.Rpc.RpcRequestVoteRequest.candidateID)
}
inline void RpcRequestVoteRequest::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Raft.Rpc.RpcRequestVoteRequest.candidateID)
}
inline void RpcRequestVoteRequest::set_candidateid(const char* value, size_t size) {
  
  candidateid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Raft.Rpc.RpcRequestVoteRequest.candidateID)
}
inline std::string* RpcRequestVoteRequest::mutable_candidateid() {
  
  // @@protoc_insertion_point(field_mutable:Raft.Rpc.RpcRequestVoteRequest.candidateID)
  return candidateid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcRequestVoteRequest::release_candidateid() {
  // @@protoc_insertion_point(field_release:Raft.Rpc.RpcRequestVoteRequest.candidateID)
  
  return candidateid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequestVoteRequest::set_allocated_candidateid(std::string* candidateid) {
  if (candidateid != nullptr) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:Raft.Rpc.RpcRequestVoteRequest.candidateID)
}

// uint64 lastLogIndex = 3;
inline void RpcRequestVoteRequest::clear_lastlogindex() {
  lastlogindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcRequestVoteRequest::lastlogindex() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcRequestVoteRequest.lastLogIndex)
  return lastlogindex_;
}
inline void RpcRequestVoteRequest::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcRequestVoteRequest.lastLogIndex)
}

// uint64 lastLogTerm = 4;
inline void RpcRequestVoteRequest::clear_lastlogterm() {
  lastlogterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcRequestVoteRequest::lastlogterm() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcRequestVoteRequest.lastLogTerm)
  return lastlogterm_;
}
inline void RpcRequestVoteRequest::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcRequestVoteRequest.lastLogTerm)
}

// -------------------------------------------------------------------

// RpcRequestVoteReply

// uint64 term = 1;
inline void RpcRequestVoteReply::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcRequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcRequestVoteReply.term)
  return term_;
}
inline void RpcRequestVoteReply::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcRequestVoteReply.term)
}

// bool voteGranted = 2;
inline void RpcRequestVoteReply::clear_votegranted() {
  votegranted_ = false;
}
inline bool RpcRequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:Raft.Rpc.RpcRequestVoteReply.voteGranted)
  return votegranted_;
}
inline void RpcRequestVoteReply::set_votegranted(bool value) {
  
  votegranted_ = value;
  // @@protoc_insertion_point(field_set:Raft.Rpc.RpcRequestVoteReply.voteGranted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Rpc
}  // namespace Raft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RaftRpc_2eproto
