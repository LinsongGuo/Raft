// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RaftRpc.proto
#ifndef GRPC_RaftRpc_2eproto__INCLUDED
#define GRPC_RaftRpc_2eproto__INCLUDED

#include "RaftRpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace Raft {
namespace Rpc {

class RaftRpc final {
 public:
  static constexpr char const* service_full_name() {
    return "Raft.Rpc.RaftRpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::Raft::Rpc::RpcAppendEntriesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcAppendEntriesReply>> AsyncRpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcAppendEntriesReply>>(AsyncRpcAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcAppendEntriesReply>> PrepareAsyncRpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcAppendEntriesReply>>(PrepareAsyncRpcAppendEntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status RpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::Raft::Rpc::RpcRequestVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcRequestVoteReply>> AsyncRpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcRequestVoteReply>>(AsyncRpcRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcRequestVoteReply>> PrepareAsyncRpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcRequestVoteReply>>(PrepareAsyncRpcRequestVoteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RpcAppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcAppendEntriesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RpcAppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcAppendEntriesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RpcRequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcRequestVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RpcRequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcRequestVoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcAppendEntriesReply>* AsyncRpcAppendEntriesRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcAppendEntriesReply>* PrepareAsyncRpcAppendEntriesRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcRequestVoteReply>* AsyncRpcRequestVoteRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Raft::Rpc::RpcRequestVoteReply>* PrepareAsyncRpcRequestVoteRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::Raft::Rpc::RpcAppendEntriesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcAppendEntriesReply>> AsyncRpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcAppendEntriesReply>>(AsyncRpcAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcAppendEntriesReply>> PrepareAsyncRpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcAppendEntriesReply>>(PrepareAsyncRpcAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status RpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::Raft::Rpc::RpcRequestVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcRequestVoteReply>> AsyncRpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcRequestVoteReply>>(AsyncRpcRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcRequestVoteReply>> PrepareAsyncRpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcRequestVoteReply>>(PrepareAsyncRpcRequestVoteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response, std::function<void(::grpc::Status)>) override;
      void RpcAppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcAppendEntriesReply* response, std::function<void(::grpc::Status)>) override;
      void RpcAppendEntries(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RpcAppendEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcAppendEntriesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response, std::function<void(::grpc::Status)>) override;
      void RpcRequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcRequestVoteReply* response, std::function<void(::grpc::Status)>) override;
      void RpcRequestVote(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RpcRequestVote(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Raft::Rpc::RpcRequestVoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcAppendEntriesReply>* AsyncRpcAppendEntriesRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcAppendEntriesReply>* PrepareAsyncRpcAppendEntriesRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcRequestVoteReply>* AsyncRpcRequestVoteRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Raft::Rpc::RpcRequestVoteReply>* PrepareAsyncRpcRequestVoteRaw(::grpc::ClientContext* context, const ::Raft::Rpc::RpcRequestVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RpcAppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_RpcRequestVote_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response);
    virtual ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RpcAppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RpcAppendEntries() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RpcAppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRpcAppendEntries(::grpc::ServerContext* context, ::Raft::Rpc::RpcAppendEntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::Raft::Rpc::RpcAppendEntriesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RpcRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RpcRequestVote() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RpcRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRpcRequestVote(::grpc::ServerContext* context, ::Raft::Rpc::RpcRequestVoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::Raft::Rpc::RpcRequestVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RpcAppendEntries<WithAsyncMethod_RpcRequestVote<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RpcAppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RpcAppendEntries() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Raft::Rpc::RpcAppendEntriesRequest, ::Raft::Rpc::RpcAppendEntriesReply>(
          [this](::grpc::ServerContext* context,
                 const ::Raft::Rpc::RpcAppendEntriesRequest* request,
                 ::Raft::Rpc::RpcAppendEntriesReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RpcAppendEntries(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RpcAppendEntries(
        ::grpc::experimental::MessageAllocator< ::Raft::Rpc::RpcAppendEntriesRequest, ::Raft::Rpc::RpcAppendEntriesReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Raft::Rpc::RpcAppendEntriesRequest, ::Raft::Rpc::RpcAppendEntriesReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RpcAppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RpcRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RpcRequestVote() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Raft::Rpc::RpcRequestVoteRequest, ::Raft::Rpc::RpcRequestVoteReply>(
          [this](::grpc::ServerContext* context,
                 const ::Raft::Rpc::RpcRequestVoteRequest* request,
                 ::Raft::Rpc::RpcRequestVoteReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RpcRequestVote(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RpcRequestVote(
        ::grpc::experimental::MessageAllocator< ::Raft::Rpc::RpcRequestVoteRequest, ::Raft::Rpc::RpcRequestVoteReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Raft::Rpc::RpcRequestVoteRequest, ::Raft::Rpc::RpcRequestVoteReply>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RpcRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_RpcAppendEntries<ExperimentalWithCallbackMethod_RpcRequestVote<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RpcAppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RpcAppendEntries() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RpcAppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RpcRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RpcRequestVote() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RpcRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RpcAppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RpcAppendEntries() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RpcAppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRpcAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RpcRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RpcRequestVote() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RpcRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRpcRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RpcAppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RpcAppendEntries() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RpcAppendEntries(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RpcAppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RpcAppendEntries(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RpcRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RpcRequestVote() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RpcRequestVote(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RpcRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RpcRequestVote(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RpcAppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RpcAppendEntries() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Raft::Rpc::RpcAppendEntriesRequest, ::Raft::Rpc::RpcAppendEntriesReply>(std::bind(&WithStreamedUnaryMethod_RpcAppendEntries<BaseClass>::StreamedRpcAppendEntries, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RpcAppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RpcAppendEntries(::grpc::ServerContext* context, const ::Raft::Rpc::RpcAppendEntriesRequest* request, ::Raft::Rpc::RpcAppendEntriesReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRpcAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Raft::Rpc::RpcAppendEntriesRequest,::Raft::Rpc::RpcAppendEntriesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RpcRequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RpcRequestVote() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Raft::Rpc::RpcRequestVoteRequest, ::Raft::Rpc::RpcRequestVoteReply>(std::bind(&WithStreamedUnaryMethod_RpcRequestVote<BaseClass>::StreamedRpcRequestVote, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RpcRequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RpcRequestVote(::grpc::ServerContext* context, const ::Raft::Rpc::RpcRequestVoteRequest* request, ::Raft::Rpc::RpcRequestVoteReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRpcRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Raft::Rpc::RpcRequestVoteRequest,::Raft::Rpc::RpcRequestVoteReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RpcAppendEntries<WithStreamedUnaryMethod_RpcRequestVote<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RpcAppendEntries<WithStreamedUnaryMethod_RpcRequestVote<Service > > StreamedService;
};

}  // namespace Rpc
}  // namespace Raft


#endif  // GRPC_RaftRpc_2eproto__INCLUDED
